# ABOUTME: Project-specific instructions for Claude Code to assist with {{PROJECT_NAME}}
# ABOUTME: Contains architecture guidelines, testing requirements, and development patterns

# {{PROJECT_NAME}} Development Guidelines

## Project Overview
This is a {{PLATFORMS}} application built using SwiftUI and the MCP xcode-build tools.
The project uses CLI-driven development without Xcode UI.

## Architecture
- **UI Framework**: {{UI_FRAMEWORK}}
- **Target Platforms**: {{PLATFORMS}}
- **iOS Deployment Target**: {{IOS_VERSION}}
- **macOS Deployment Target**: {{MACOS_VERSION}}
- **Bundle Identifier**: {{BUNDLE_ID}}

## Build and Run Instructions

### Quick Commands
```bash
# Run the app
make ios          # iOS simulator
make mac          # macOS app

# Test the app
make test         # All tests
```

### Building
```bash
# iOS builds
make build-ios               # Build for simulator
make build-ios-device        # Build for physical device
make build-ios CONFIGURATION=Release  # Release build

# macOS builds
make build-macos             # Build macOS app
make build-macos CONFIGURATION=Release

# Build with verbose output (see all xcodebuild output)
make verbose build-ios

# Build with quiet mode (logs to logs/build.log)
make quiet build-ios
```

### Running
```bash
# iOS Simulator
make run-ios                 # Default simulator
make run-ios SIMULATOR_NAME="iPhone 15 Pro"  # Specific simulator

# Physical Device
make list-devices            # Get device UUID
make build-ios-device
make install-device DEVICE_UUID=<uuid>

# macOS
make run-macos
```

### Testing
```bash
# Run tests
make test                    # All tests
make test-ios                # iOS tests only
make test-macos              # macOS tests only

# Verbose testing
make verbose test

# Test logs are saved to logs/test.log
```

### Logging
```bash
# All logs are saved to logs/ directory
make logs                    # View recent logs
make clean-logs              # Clean log files

# Log files:
# - logs/build.log  (build output)
# - logs/test.log   (test results)
# - logs/run.log    (runtime logs)
```

## Test-Driven Development (TDD) Requirements

### TDD Workflow - MANDATORY
1. **Write failing test first**: Create test that defines desired behavior
2. **Run test to confirm failure**: `make test-ios` or `make test-macos`
3. **Write minimal code**: Just enough to make the test pass
4. **Run test to confirm success**: Test should now pass
5. **Refactor**: Clean up code while keeping tests green
6. **Repeat**: For each new feature or bug fix

### Testing Guidelines
- ALL new features MUST have unit tests written FIRST
- UI components MUST have UI tests with accessibility identifiers
- Test coverage target: 80% minimum
- Run tests before committing: `make test`
- Tests must be comprehensive and cover edge cases
- Use Swift Testing framework (@Test, #expect, #require)

### Example TDD Flow
```swift
// 1. Write failing test first
@Test func userCanAddItem() async throws {
    let viewModel = ItemViewModel()
    try await viewModel.addItem("Test Item")
    #expect(viewModel.items.count == 1)
    #expect(viewModel.items[0].title == "Test Item")
}

// 2. Run test - it fails (no implementation)
// 3. Implement minimal code to pass
// 4. Run test - it passes
// 5. Refactor if needed
```

## Code Style Guidelines
- Use SwiftUI for all new UI components (NO UIKit)
- Follow Swift API Design Guidelines
- Use async/await for asynchronous code
- Prefer value types (structs) over reference types (classes)
- All public APIs must have documentation comments
- Use @Observable for view models (not ObservableObject)
- Use .task modifier for async work (not Task in onAppear)

## Important Notes for Claude

### When Building/Running
- ALWAYS check if build succeeds before marking task complete
- If build fails, read the error logs and fix issues
- Use verbose mode when debugging: `make verbose build-ios`
- Check logs/build.log for detailed error messages

### When Testing
- ALWAYS write tests FIRST (TDD is mandatory)
- Run tests after every change
- If tests fail, DO NOT proceed until fixed
- Test output MUST be pristine to pass

### Quiet vs Verbose Modes
```bash
# Quiet mode (default) - minimal output, logs to file
make build-ios
make test

# Verbose mode - see all xcodebuild output
make verbose build-ios
make verbose test
VERBOSE=1 make build-ios  # Via environment variable

# Check logs for details
cat logs/build.log
cat logs/test.log
```

## Project Structure
```
{{PROJECT_NAME}}/
├── {{PROJECT_NAME}}.xcworkspace     # Main workspace
├── {{PROJECT_NAME}}.xcodeproj       # Project file
├── {{PROJECT_NAME}}/                # Main app target
│   ├── {{PROJECT_NAME}}App.swift    # App entry point
│   ├── ContentView.swift            # Main view
│   └── Assets.xcassets              # Resources
├── {{PROJECT_NAME}}Package/         # Swift Package for features
│   ├── Sources/
│   └── Tests/
└── {{PROJECT_NAME}}UITests/         # UI test target
```

## MCP Tools Usage
When working with this project, use these MCP tools:
- `mcp__xcode-build__build_sim_name_ws` - Build for simulator
- `mcp__xcode-build__test_sim_name_ws` - Run tests
- `mcp__xcode-build__list_sims` - List simulators
- `mcp__xcode-build__launch_app_sim` - Launch app

## Common Tasks

### Adding a New Feature
1. Create feature branch: `git checkout -b feature/feature-name`
2. Add code in `{{PROJECT_NAME}}Package/Sources/`
3. Add tests in `{{PROJECT_NAME}}Package/Tests/`
4. Run tests: `make test`
5. Commit with descriptive message

### Debugging
- Use `print()` statements for console output
- Check simulator logs with MCP tools
- Use Xcode's debug gauges via `make open-xcode` if needed

### Performance
- Profile with Instruments when needed
- Keep view hierarchies shallow
- Use `@StateObject` and `@ObservedObject` appropriately
- Lazy load heavy resources

## Important Notes
- NEVER commit secrets or API keys
- Always test on both iOS and macOS if supporting both
- Keep dependencies minimal - prefer native frameworks
- Document complex logic with inline comments

## CI/CD
GitHub Actions runs tests on:
- Every push to main/develop branches
- All pull requests
- Workflow can be triggered manually

## Device Testing
For physical device testing:
1. Connect device via USB
2. Run `make list-devices` to get device ID
3. Use device-specific build commands in Makefile

## Troubleshooting
- If simulator won't launch: `make clean && make ios`
- For build errors: Check iOS/macOS deployment targets match available SDKs
- Missing dependencies: Ensure Xcode Command Line Tools are installed
- MCP errors: Verify xcode-build server is running

## Contact
Project maintained by: {{DEVELOPER_NAME}}
Bundle ID: {{BUNDLE_ID}}